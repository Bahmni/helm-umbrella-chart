name: Deploy to dev environment


on:
  push:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      enable_db_setup:
        description: 'Enable this to create databases'
        required: true
        type: boolean
        default: false

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      CLUSTER_NAME: bahmni-cluster-dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.BAHMNI_AWS_ID }}
          aws-secret-access-key: ${{ secrets.BAHMNI_AWS_SECRET }}
          aws-region: ${{ secrets.BAHMNI_AWS_REGION }}
          role-to-assume: ${{ secrets.BAHMNI_INFRA_ADMIN_ROLE }}
          role-duration-seconds: 900 # 15 mins
          role-session-name: BahmniInfraAdminSession
      - name: Authorise Kubectl with EKS
        run: aws eks update-kubeconfig --name $CLUSTER_NAME
      - name: Install Nginx Ingress
        run: |
          wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.2.0/deploy/static/provider/aws/nlb-with-tls-termination/deploy.yaml
          sed  -i.bak "s/XXX.XXX.XXX\/XX/10.0.0.0\/16/" deploy.yaml
          sed  -i.bak "s/arn:aws:acm:us-west-2:XXXXXXXX:certificate\/XXXXXX-XXXXXXX-XXXXXXX-XXXXXXXX/${{ secrets.MYBAHMNI_CERT_ARN }}/" deploy.yaml
          kubectl apply -f deploy.yaml
      - name: Upsert Route53 A record with INGRESS_DNS
        run: |
          INGRESS_DNS=$(kubectl -n ingress-nginx  get svc ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
          jq --arg ingress_dns "$INGRESS_DNS" '.Changes[].ResourceRecordSet.AliasTarget.DNSName = $ingress_dns' aws/route53/lite.mybahmni.in.json > recordset
          aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://recordset
      - name: Setup Environment secrets
        shell: bash
        run: bash .github/setupEnvSecrets.sh dev
      - name: Setup databases
        if: ${{ github.event.inputs.enable_db_setup == 'true' }}
        run: |
          helm install db-setup db-setup --repo https://bahmni.github.io/helm-charts --devel --wait --wait-for-jobs --atomic --timeout 1m \
          --set DB_HOST=$RDS_HOST \
          --set DB_ROOT_USERNAME=$RDS_USERNAME \
          --set DB_ROOT_PASSWORD=$RDS_PASSWORD \
          --set databases.openmrs.DB_NAME=openmrs \
          --set databases.openmrs.USERNAME=$OPENMRS_DB_USERNAME \
          --set databases.openmrs.PASSWORD=$OPENMRS_DB_PASSWORD \
          --set databases.crater.DB_NAME=crater \
          --set databases.crater.USERNAME=$CRATER_DB_USERNAME \
          --set databases.crater.PASSWORD=$CRATER_DB_PASSWORD \
          --set databases.reports.DB_NAME=bahmni_reports \
          --set databases.reports.USERNAME=$REPORTS_DB_USERNAME \
          --set databases.reports.PASSWORD=$REPORTS_DB_PASSWORD

      - name: Deleting db-setup helm release
        if: ${{ github.event.inputs.enable_db_setup == 'true' }}
        run: helm uninstall db-setup
      - name: Helm Dependency Update
        run: helm dependency update
      - name: List Helm Dependencies
        run: ls charts
      - name: Helm Upgrade
        run: |
          helm upgrade bahmni-dev . \
          --set bahmni-openmrs.secrets.DB_USERNAME=$OPENMRS_DB_USERNAME \
          --set bahmni-openmrs.secrets.DB_PASSWORD=$OPENMRS_DB_PASSWORD \
          --set bahmni-openmrs.secrets.DB_HOST=$RDS_HOST \
          --set reports.secrets.OPENMRS_DB_HOST=$RDS_HOST \
          --set reports.secrets.OPENMRS_DB_USERNAME=$OPENMRS_DB_USERNAME \
          --set reports.secrets.OPENMRS_DB_PASSWORD=$OPENMRS_DB_PASSWORD \
          --set reports.secrets.REPORTS_DB_SERVER=$RDS_HOST \
          --set reports.secrets.REPORTS_DB_USERNAME=$REPORTS_DB_USERNAME \
          --set reports.secrets.REPORTS_DB_PASSWORD=$REPORTS_DB_PASSWORD \
          --set hip.secrets.GATEWAY_CLIENT_ID=$GATEWAY_CLIENT_ID \
          --set hip.secrets.GATEWAY_CLIENT_SECRET=$GATEWAY_CLIENT_SECRET \
          --set hip.secrets.OPENMRS_PASSWORD=Admin123 \
          --set hip.config.BAHMNI_URL=https://lite.mybahmni.in/openmrs \
          --set hiu.secrets.HIU_CLIENT_ID=$GATEWAY_CLIENT_ID \
          --set hiu.secrets.HIU_CLIENT_SECRET=$GATEWAY_CLIENT_SECRET \
          --set hiu.config.DATA_PUSH_URL=https://lite.mybahmni.in/hiu-api/data/notification \
          --set hiu-ui.config.BACKEND_BASE_URL=https://lite.mybahmni.in \
          --set global.postgresql.auth.postgresPassword=$PSQL_PASSWORD \
          --set rabbitmq.auth.username=$MQ_USERNAME \
          --set rabbitmq.auth.password=$MQ_PASSWORD \
          --set ingress.host=lite.mybahmni.in \
          --values=values/dev.yaml \
          --install
  notification:
    name: Slack notification
    needs:
      - deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Success
        if: ${{ needs.deploy.result == 'success' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":">ðŸŸ¢ Bahmni India Distro deployed. \n>*Bahmni* https://lite.mybahmni.in \n>*Payments* https://payments-lite.mybahmni.in \n> <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Umbrella Chart Job #${{github.run_id}}>"}' ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Failure
        if: ${{ needs.deploy.result == 'failure' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"ðŸ”´ Bahmni India Distro deployment failed!!! This is where you go look what happened â†’ <https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}|Umbrella Chart Job #${{github.run_id}}>"}' ${{ secrets.SLACK_WEBHOOK_URL }}
